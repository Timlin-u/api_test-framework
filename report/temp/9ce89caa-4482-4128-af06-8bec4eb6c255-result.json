{"name": "test_ecommerce[api_info1]", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'host' in section: 'Host'", "trace": "self = <configparser.ConfigParser object at 0x000001BF478FB010>\nsection = 'Host', option = 'host'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nE:\\python\\lib\\configparser.py:790: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\python\\lib\\collections\\__init__.py:982: in __getitem__\n    return self.__missing__(key)            # support subclasses that define __missing__\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'url': 'http://127.0.0.1:8787'}, {}), key = 'host'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'host'\n\nE:\\python\\lib\\collections\\__init__.py:974: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\napi_info = {'baseInfo': {'api_name': '获取商品详情接口', 'headers': '{\"Content-Type\": \"application/json;charset=UTF-8\"}', 'method': 'POST...品详情测试', 'json': {'page': 1, 'pro_id': '33809635011', 'size': 20}, 'validation': [{'code': 200}, {'contain': 'item'}]}]}\n\n    @pytest.mark.skipif(data is None, reason=\"ecommerce.yaml 读取失败，跳过测试\")\n    @pytest.mark.parametrize(\"api_info\", data if data else [{}])\n    def test_ecommerce(api_info):\n        # 预检查 YAML 数据格式\n        if not isinstance(api_info, dict):\n            pytest.skip(\"api_info 不是有效的字典，跳过测试\")\n        if 'baseInfo' not in api_info or 'testCase' not in api_info:\n            pytest.skip(\"api_info 缺少 baseInfo 或 testCase，跳过测试\")\n        if not isinstance(api_info.get('testCase'), list) or not api_info['testCase']:\n            pytest.skip(\"testCase 为空，跳过测试\")\n    \n        print(\"执行测试:\", api_info)\n    \n        # 构造完整 URL\n        config = ConfigParse()\n>       full_url = config.get_host() + api_info['baseInfo'].get('url', '/post')\n\ntestcases\\test_ecommerce.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nunit_tools\\handle_data\\configParse.py:16: in get_host\n    return self.get_value(\"Host\", \"host\")\nunit_tools\\handle_data\\configParse.py:13: in get_value\n    return self.config.get(section, option)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x000001BF478FB010>\nsection = 'Host', option = 'host'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'host' in section: 'Host'\n\nE:\\python\\lib\\configparser.py:793: NoOptionError"}, "attachments": [{"name": "stdout", "source": "24959710-e399-4505-9ad8-d1091ac26f55-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "api_info", "value": "{'baseInfo': {'api_name': '获取商品详情接口', 'url': '/coupApply/cms/productDetail', 'method': 'POST', 'headers': '{\"Content-Type\": \"application/json;charset=UTF-8\"}'}, 'testCase': [{'case_name': '获取商品详情测试', 'json': {'pro_id': '33809635011', 'page': 1, 'size': 20}, 'validation': [{'code': 200}, {'contain': 'item'}]}]}"}], "start": 1742457562369, "stop": 1742457562370, "uuid": "e16cead5-03a1-486a-b3b9-4762435d7116", "historyId": "7483a50c2ce8d5024d376486b8ab8bf1", "testCaseId": "13641d301f7968ae2cff765ba98e07b5", "fullName": "testcases.test_ecommerce#test_ecommerce", "labels": [{"name": "tag", "value": "@pytest.mark.skipif(False, reason='ecommerce.yaml 读取失败，跳过测试')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_ecommerce"}, {"name": "host", "value": "DESKTOP-PRRMS83"}, {"name": "thread", "value": "14524-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_ecommerce"}]}