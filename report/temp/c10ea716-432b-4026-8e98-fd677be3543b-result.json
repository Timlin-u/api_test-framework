{"name": "test_ecommerce[api_info7]", "status": "failed", "statusDetails": {"message": "AssertionError: 断言失败", "trace": "api_info = {'baseInfo': {'api_name': '校验商品物流状态接口', 'headers': '{\"Content-Type\": \"application/json;charset=UTF-8\"}', 'method': 'PO...son': {'orderNumber': '208019542305257723473', 'timeStamp': 2}, 'validation': [{'code': 200}, {'contain': 'status'}]}]}\n\n    @pytest.mark.skipif(data is None, reason=\"ecommerce.yaml 读取失败，跳过测试\")\n    @pytest.mark.parametrize(\"api_info\", data if data else [{}])\n    def test_ecommerce(api_info):\n        # 预检查 YAML 数据格式\n        if not isinstance(api_info, dict):\n            pytest.skip(\"api_info 不是有效的字典，跳过测试\")\n        if 'baseInfo' not in api_info or 'testCase' not in api_info:\n            pytest.skip(\"api_info 缺少 baseInfo 或 testCase，跳过测试\")\n        if not isinstance(api_info.get('testCase'), list) or not api_info['testCase']:\n            pytest.skip(\"testCase 为空，跳过测试\")\n    \n        print(\"执行测试:\", api_info)\n    \n        # 构造完整 URL\n        config = ConfigParse()\n        full_url = config.get_host() + api_info['baseInfo'].get('url', '/post')\n    \n        # 复制测试用例数据\n        test_data = dict(api_info['testCase'][0])\n        case_name = test_data.pop('case_name', '默认用例')\n        validation = test_data.pop('validation', None)\n    \n        # 处理 headers\n        headers = api_info['baseInfo'].get('headers', '{\"Content-Type\": \"application/json\"}')\n        if isinstance(headers, str):\n            headers = json.loads(headers)\n    \n        # 发起请求\n        response = SendRequests().execute_api_request(\n            api_name=api_info['baseInfo'].get('api_name', '接口'),\n            url=full_url,\n            method=api_info['baseInfo'].get('method', 'POST'),\n            headers=headers,\n            case_name=case_name,\n            **test_data\n        )\n    \n        # 如果响应状态码不是 200，则跳过断言（或使用 pytest.fail 记录错误）\n        if response.status_code != 200:\n            pytest.skip(f\"接口返回状态码 {response.status_code}，跳过断言\")\n    \n        # 尝试解析 JSON 返回\n        try:\n            response_json = response.json()\n        except Exception:\n            pytest.fail(f\"响应不是 JSON：{response.text}\")\n    \n        # 如果 validation 为字典，则转换为列表\n        if isinstance(validation, dict):\n            validation = [validation]\n    \n        # 断言验证\n>       Assertions.assert_result(validation or [], response_json, response.status_code)\n\ntestcases\\test_ecommerce.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpected_results = [{'code': 200}, {'contain': 'status'}]\nresponse = {'error': '订单编号不存在', 'error_code': '4000'}, status_code = 200\n\n    @staticmethod\n    def assert_result(expected_results, response, status_code):\n        all_flag = 0\n        for item in expected_results:\n            for mode, expected in item.items():\n                if mode == \"code\":\n                    all_flag += Assertions.status_code_assert(expected, status_code)\n                elif mode == \"contain\":\n                    all_flag += Assertions.contain_assert(expected, response)\n                else:\n                    logs.error(f\"不支持的断言模式: {mode}\")\n                    all_flag += 1\n>       assert all_flag == 0, \"断言失败\"\nE       AssertionError: 断言失败\n\nunit_tools\\assertion_utils\\Assertions.py:34: AssertionError"}, "attachments": [{"name": "log", "source": "1d915ce2-9e72-43c1-bd7f-bdbb2c9060b2-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d5024837-cce9-4ee3-850a-b26a69df06ad-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "8618b3ab-d8a2-4f6e-9643-c7a85c416646-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "api_info", "value": "{'baseInfo': {'api_name': '校验商品物流状态接口', 'url': '/coupApply/cms/checkLogisticsStatus', 'method': 'POST', 'headers': '{\"Content-Type\": \"application/json;charset=UTF-8\"}'}, 'testCase': [{'case_name': '校验商品物流状态测试', 'json': {'orderNumber': '208019542305257723473', 'timeStamp': 2}, 'validation': [{'code': 200}, {'contain': 'status'}]}]}"}], "start": 1742457722604, "stop": 1742457722608, "uuid": "9cb990dd-5585-497b-b231-fd6efd5d2327", "historyId": "28f702c56e412c9f3541c279074f6222", "testCaseId": "13641d301f7968ae2cff765ba98e07b5", "fullName": "testcases.test_ecommerce#test_ecommerce", "labels": [{"name": "tag", "value": "@pytest.mark.skipif(False, reason='ecommerce.yaml 读取失败，跳过测试')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_ecommerce"}, {"name": "host", "value": "DESKTOP-PRRMS83"}, {"name": "thread", "value": "21368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_ecommerce"}]}